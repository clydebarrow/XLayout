/*
 * Copyright (c) 2019 Control-J Pty. Ltd. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * .
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

ext {
    kotlinVersion = '1.3.21'
    roboelectricVersion = "3.5.1"
    compileSdkVersion = 28
    minSdkVersion = 21
    supportLibVersion = "28.0.0"
    roboVMVersion = "2.3.5"
    rxJavaVersion = "2.1.14"
    rxKotlinVersion = "2.2.0"
    retrofitVersion = "2.3.0"
    gsonVersion = "2.8.5"
    daggerVersion = "2.11"
    multidexLibVersion = "1.0.3"
    jsoupVersion = "1.11.1"
    dropboxVersion = "3.0.7"
    espressoVersion = "3.0.1"
    mapboxVersion = "6.8.1"
    mapboxLocationLayerVersion = "0.10.0"
    acraVersion = "5.1.3"
    rxAndroidVersion = "2.0.1"
    rxpermissionsVersion = "0.9.4"
    jodaTimeVersion = "2.9.9"
    firestoreVersion = "11.8.0"
    firebaseVersion = "16.0.4"
    rxFirebaseVersion = "11.8.0.0"
    crashlyticsVersion = "2.9.1"
    okHttpVersion = "3.11.0"
    awsVersion = "2.6.7"
    firebaseUIVersion = "4.3.1"
    nitriteVersion = "3.0.0"
    detektVersion = "1.0.0-RC14"
    jacksonVersion = "2.7.2"
}
buildscript {
    ext.kotlinVersion = '1.3.21'
    ext.detektVersion = "1.0.0-RC14"
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
allprojects {
    task downloadDependencies() {
        description 'Download all dependencies to the Gradle cache'
        doLast {
            configurations.findAll { it.canBeResolved }.files
        }
    }
}

